import heapq

def uniform_cost_search(graph, start, goal):
    heap = [(0, start)]
    visited = set()
    costs = {start: 0}

    while heap:
        current_cost, current_node = heapq.heappop(heap)

        if current_node == goal:
            return current_cost

        if current_node not in visited:
            visited.add(current_node)

            for neighbor, cost in graph[current_node]:
                new_cost = current_cost + cost
                if neighbor not in costs or new_cost < costs[neighbor]:
                    costs[neighbor] = new_cost
                    heapq.heappush(heap, (new_cost, neighbor))

    return None

# Example usage
graph = {
    'A': [('B', 5), ('C', 1)],
    'B': [('A', 5), ('C', 2), ('D', 1)],
    'C': [('A', 1), ('B', 2), ('D', 4), ('E', 8)],
    'D': [('B', 1), ('C', 4), ('E', 3), ('F', 6)],
    'E': [('C', 8), ('D', 3)],
    'F': [('D', 6)]
}

start = 'A'
goal = 'F'

shortest_cost = uniform_cost_search(graph, start, goal)
if shortest_cost is not None:
    print(f"The shortest cost from {start} to {goal} is {shortest_cost}")
else:
    print("No path found")
